What happens when you initialize a repository? Why do you need to do it?

A hidden .get repository will create. I need that because now I can keep track of my work by doing commits.


How is the staging area different from the working directory and the repository? What value do you think it offers?

So now we have the working directory and the git repository and the staging area. The staging area is the middle between the other two directories and I need it to group more than one file and then I can commit all the files together in a single commit.


How can you use the staging area to make sure you have one commit per logical change?

After written my changes (one logical change) on the file and then run git status I will found the file that I just made the change in. Then I can add just the file that I made the change in to the staging area then commit the change so now I have commit one logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

It will be helpful if I want another version of my app (like if the app was a game the other version will be the easy mode of the game) so now there is a 2 branch and everything is organized or if I want to make a big change and I don't know if it will work or not and in the same time I want a working version of my app so if there is a bug I can fix it without confusing with my big change so here the branch will be so helful.


How do the diagrams help you visualize the branch structure?

It is so important and it help you so your work will be organized and clear and you know what commit you can reach while you are in branch or commit. And you know were you are so you don't make a commit that is unreachable.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is a new commit that contain all the changes of the two branches. To be clear who will be the parents of the two branches which is the branch that was checked out when the marged happened.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging: pros: Easy and fast. cons: If the merging changed something I will not know about it.
Manually merging: pros: To Know where is the conflicts and solve it by yourself rather than something happend to the code that you don't know about it or you don't want it. cons: It will take alot of time and it will be annoying. 